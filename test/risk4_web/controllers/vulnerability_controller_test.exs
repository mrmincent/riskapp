defmodule Risk4Web.VulnerabilityControllerTest do
  use Risk4Web.ConnCase

  import Risk4.AssessmentFixtures

  @create_attrs %{description: "some description", name: "some name"}
  @update_attrs %{description: "some updated description", name: "some updated name"}
  @invalid_attrs %{description: nil, name: nil}

  describe "index" do
    test "lists all vulnerabilities", %{conn: conn} do
      conn = get(conn, ~p"/vulnerabilities")
      assert html_response(conn, 200) =~ "Listing Vulnerabilities"
    end
  end

  describe "new vulnerability" do
    test "renders form", %{conn: conn} do
      conn = get(conn, ~p"/vulnerabilities/new")
      assert html_response(conn, 200) =~ "New Vulnerability"
    end
  end

  describe "create vulnerability" do
    test "redirects to show when data is valid", %{conn: conn} do
      conn = post(conn, ~p"/vulnerabilities", vulnerability: @create_attrs)

      assert %{id: id} = redirected_params(conn)
      assert redirected_to(conn) == ~p"/vulnerabilities/#{id}"

      conn = get(conn, ~p"/vulnerabilities/#{id}")
      assert html_response(conn, 200) =~ "Vulnerability #{id}"
    end

    test "renders errors when data is invalid", %{conn: conn} do
      conn = post(conn, ~p"/vulnerabilities", vulnerability: @invalid_attrs)
      assert html_response(conn, 200) =~ "New Vulnerability"
    end
  end

  describe "edit vulnerability" do
    setup [:create_vulnerability]

    test "renders form for editing chosen vulnerability", %{conn: conn, vulnerability: vulnerability} do
      conn = get(conn, ~p"/vulnerabilities/#{vulnerability}/edit")
      assert html_response(conn, 200) =~ "Edit Vulnerability"
    end
  end

  describe "update vulnerability" do
    setup [:create_vulnerability]

    test "redirects when data is valid", %{conn: conn, vulnerability: vulnerability} do
      conn = put(conn, ~p"/vulnerabilities/#{vulnerability}", vulnerability: @update_attrs)
      assert redirected_to(conn) == ~p"/vulnerabilities/#{vulnerability}"

      conn = get(conn, ~p"/vulnerabilities/#{vulnerability}")
      assert html_response(conn, 200) =~ "some updated description"
    end

    test "renders errors when data is invalid", %{conn: conn, vulnerability: vulnerability} do
      conn = put(conn, ~p"/vulnerabilities/#{vulnerability}", vulnerability: @invalid_attrs)
      assert html_response(conn, 200) =~ "Edit Vulnerability"
    end
  end

  describe "delete vulnerability" do
    setup [:create_vulnerability]

    test "deletes chosen vulnerability", %{conn: conn, vulnerability: vulnerability} do
      conn = delete(conn, ~p"/vulnerabilities/#{vulnerability}")
      assert redirected_to(conn) == ~p"/vulnerabilities"

      assert_error_sent 404, fn ->
        get(conn, ~p"/vulnerabilities/#{vulnerability}")
      end
    end
  end

  defp create_vulnerability(_) do
    vulnerability = vulnerability_fixture()
    %{vulnerability: vulnerability}
  end
end
